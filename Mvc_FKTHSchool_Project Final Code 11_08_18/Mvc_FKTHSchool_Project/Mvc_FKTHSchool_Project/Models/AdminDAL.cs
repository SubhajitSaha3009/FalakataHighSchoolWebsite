using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data.SqlClient;
using System.Configuration;
using System.Web.Security;
using System.IO;

namespace Mvc_FKTHSchool_Project.Models
{   
    public class AdminDAL
    {
        SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["constr"].ConnectionString);

        public string addTeacher(TeacherModel t,HttpPostedFileBase file)
        {
            try
            {

                if (t.subjectSpecilization == null)
                {
                    t.subjectSpecilization = "";
                }
                if (t.teacherEmailID == null)
                {
                    t.teacherEmailID = "";
                }
                if (t.teacherAadhar == null)
                {
                    t.teacherAadhar = "";
                }
                if (t.teacherPAN == null)
                {
                    t.teacherPAN = "";
                }

                SqlCommand com_addTeacher = new SqlCommand("insert Teachers values(@name,@gender,@dob,@designation,@qual,@specialization,@address,@mbl,@email,@pan,@aadhar,'0',@iaddress,'AutoGenerated','Current teacher')", con);

                com_addTeacher.Parameters.AddWithValue("@name", t.teacherName);
                com_addTeacher.Parameters.AddWithValue("@gender", t.teacherGender);
                com_addTeacher.Parameters.AddWithValue("@dob", t.dob);
                com_addTeacher.Parameters.AddWithValue("@designation", t.teacherDesignation);
                com_addTeacher.Parameters.AddWithValue("@qual", t.TeacherQualification);
                com_addTeacher.Parameters.AddWithValue("@specialization", t.subjectSpecilization);
                com_addTeacher.Parameters.AddWithValue("@address", t.teacherAddress);
                com_addTeacher.Parameters.AddWithValue("@mbl", t.teacherMobileNo);
                com_addTeacher.Parameters.AddWithValue("@email", t.teacherEmailID);
                com_addTeacher.Parameters.AddWithValue("@pan", t.teacherPAN);
                com_addTeacher.Parameters.AddWithValue("@aadhar", t.teacherAadhar);
                com_addTeacher.Parameters.AddWithValue("@iaddress", "");


                con.Open();
                com_addTeacher.ExecuteNonQuery();

                SqlCommand com_getTeacherID = new SqlCommand("select @@identity", con);
                t.teacherID = Convert.ToInt32(com_getTeacherID.ExecuteScalar());

                if (t.imageAddress != null)
                {
                    string imageAddress = "/TeacherImages/" + t.teacherID.ToString() + Path.GetExtension(file.FileName);

                    SqlCommand com_updateimage = new SqlCommand("update Teachers set imageAddress=@i where teacherid=@id", con);
                    com_updateimage.Parameters.AddWithValue("@i", imageAddress);
                    com_updateimage.Parameters.AddWithValue("@id", t.teacherID);

                    com_updateimage.ExecuteNonQuery();

                }

                string auto_generatedPassword = System.Web.Security.Membership.GeneratePassword(8, 3).ToUpper();

                MembershipCreateStatus status;
                Membership.CreateUser(t.teacherID.ToString(), auto_generatedPassword, t.teacherEmailID, "abc", "abc", true, out status);

                if (status == MembershipCreateStatus.Success)
                {
                    Roles.AddUserToRole(t.teacherID.ToString(), "Teacher");
                   //con.Close();
                    string idpass = t.teacherID + " " + auto_generatedPassword;

                    return idpass;
                }
                else
                {
                  //con.Close();
                    return null;
                }
            }

            finally
            {
                con.Close();
            }
         }
          

        public TeacherModel viewTeacherProfile(int teacherID)
        {
            try
            { 
            SqlCommand com_viewTeacher = new SqlCommand("select * from teachers where teacherid=@tid",con);
            com_viewTeacher.Parameters.AddWithValue("@tid",teacherID);

            con.Open();
            SqlDataReader dr= com_viewTeacher.ExecuteReader();

            TeacherModel t = new TeacherModel();
            if(dr.Read())
            {
                t.teacherID = dr.GetInt32(0);
                t.teacherName = dr.GetString(1);
                t.teacherGender = dr.GetString(2);
                t.dob = dr.GetDateTime(3).ToShortDateString();
                t.teacherDesignation=dr.GetString(4);
                t.TeacherQualification = dr.GetString(5);
                t.subjectSpecilization = dr.GetString(6);
                t.teacherAddress = dr.GetString(7);
                t.teacherMobileNo = dr.GetString(8);
                t.teacherEmailID = dr.GetString(9);
                t.teacherPAN = dr.GetString(10);
                t.teacherAadhar = dr.GetString(11);
                t.noOfNotesUploaded = dr.GetInt32(12);
                t.teacherStatus = dr.GetString(15);

            }
            return t;
            }

            finally
            {
                con.Close();
            }
        }

        /// <summary>
        /// ////////////////changes souvik 15/11
        /// </summary>
        /// <param name="teacherID"></param>
        /// <param name="t"></param>
        /// <returns></returns>

        public bool updateTeacherProfile(int teacherID, UpdateTeacherModel t)
        {
            try
            {

                if (t.subjectSpecilization == null)
                {
                    t.subjectSpecilization = "";
                }
                if (t.teacherEmailID == null)
                {
                    t.teacherEmailID = "";
                }
                if (t.teacherAadhar == null)
                {
                    t.teacherAadhar = "";
                }
                if (t.teacherPAN == null)
                {
                    t.teacherPAN = "";
                }


                SqlCommand com_updateTeacher = new SqlCommand("update Teachers set TeacherName=@name, TeacherDesignation=@designation,TeacherQualification=@qual, SubjectSpecialisation=@specialization,  TeacherMobileNo=@mbl, TeacherAddress=@address, teacherStatus=@status, TeacherPAN=@pan,TeacherAadhar=@aadhar where TeacherID=@tid", con);
                com_updateTeacher.Parameters.AddWithValue("@name", t.teacherName);
                com_updateTeacher.Parameters.AddWithValue("@designation", t.teacherDesignation);
                com_updateTeacher.Parameters.AddWithValue("@qual", t.TeacherQualification);
                com_updateTeacher.Parameters.AddWithValue("@specialization", t.subjectSpecilization);
                com_updateTeacher.Parameters.AddWithValue("@mbl", t.teacherMobileNo);
                com_updateTeacher.Parameters.AddWithValue("@address", t.teacherAddress);
                com_updateTeacher.Parameters.AddWithValue("@tid", teacherID);
                com_updateTeacher.Parameters.AddWithValue("@status", t.teacherStatus);
                com_updateTeacher.Parameters.AddWithValue("@pan", t.teacherPAN);
                com_updateTeacher.Parameters.AddWithValue("@aadhar", t.teacherAadhar);

                con.Open();
                int a = com_updateTeacher.ExecuteNonQuery();

                if (t.imageAddress != null)
                {
                    SqlCommand com_updateTeacherimage = new SqlCommand("update Teachers set imageAddress=@im where TeacherID=@tid", con);
                    com_updateTeacherimage.Parameters.AddWithValue("@im", t.imageAddress);
                    com_updateTeacherimage.Parameters.AddWithValue("@tid", teacherID);

                    com_updateTeacherimage.ExecuteNonQuery();
                }
                //if (t.subjectSpecilization != null)
                //{
                //    SqlCommand com_updateTeacherSp = new SqlCommand("update Teachers set SubjectSpecialisation=@sp where TeacherID=@tid", con);
                //    com_updateTeacherSp.Parameters.AddWithValue("@sp", t.subjectSpecilization);
                //    com_updateTeacherSp.Parameters.AddWithValue("@tid", teacherID);

                //    com_updateTeacherSp.ExecuteNonQuery();
                //}
                //if (t.teacherEmailID != null)
                //{
                //    SqlCommand com_updateTeacherEmail = new SqlCommand("update Teachers set TeacherEmailID=@email where TeacherID=@tid", con);
                //    com_updateTeacherEmail.Parameters.AddWithValue("@email", t.teacherEmailID);
                //    com_updateTeacherEmail.Parameters.AddWithValue("@tid", teacherID);

                //    com_updateTeacherEmail.ExecuteNonQuery();
                //}
                //if (t.teacherAadhar != null)
                //{
                //    SqlCommand com_updateTeacherAaadhar = new SqlCommand("update Teachers set TeacherAadhar=@aadhar where TeacherID=@tid", con);
                //    com_updateTeacherAaadhar.Parameters.AddWithValue("@aadhar", t.teacherAadhar);
                //    com_updateTeacherAaadhar.Parameters.AddWithValue("@tid", teacherID);

                //    com_updateTeacherAaadhar.ExecuteNonQuery();
                //}


                //if (t.teacherPAN != null)
                //{
                //    SqlCommand com_updateTeacherPan = new SqlCommand("update Teachers set TeacherPAN=@pan where TeacherID=@tid", con);
                //    com_updateTeacherPan.Parameters.AddWithValue("@pan", t.teacherPAN);
                //    com_updateTeacherPan.Parameters.AddWithValue("@tid", teacherID);

                //    com_updateTeacherPan.ExecuteNonQuery();
                //}




                if (a != 0)
                {
                    //con.Close();
                    return true;
                }
                else
                {
                    // con.Close();
                    return false;
                }
            }

            finally
            {
                con.Close();
            }
        }

        public List<string> getTeacherStatus()
        {
            try
            { 
            SqlCommand com_getStatus = new SqlCommand("select * from TeacherStatus",con);
            con.Open();
            SqlDataReader dr= com_getStatus.ExecuteReader();

            List<string> list_status = new List<string>();
            while(dr.Read())
            {
                string s = dr.GetString(1);
                list_status.Add(s);
            }
            
           // con.Close();
            return list_status;
            }

            finally
            {
                con.Close();
            }
        }




        public string addAdmin(AdminModel t,HttpPostedFileBase file)
        {
            try
            { 
            SqlCommand com_addAdmin = new SqlCommand("insert Admins values(@name,@gender,@designation,@iaddress,'AutoGenerated','Active')", con);

            com_addAdmin.Parameters.AddWithValue("@name", t.adminName);
            com_addAdmin.Parameters.AddWithValue("@gender", t.adminGender);
            com_addAdmin.Parameters.AddWithValue("@designation", t.adminDesignation);
            com_addAdmin.Parameters.AddWithValue("@iaddress", "");


            con.Open();
            com_addAdmin.ExecuteNonQuery();

            SqlCommand com_getAdminID = new SqlCommand("select @@identity", con);
            t.adminID = Convert.ToInt32(com_getAdminID.ExecuteScalar());

            if (t.imageAddress != null)
            {
                string imageAddress = "/AdminImages/" + t.adminID.ToString()  +Path.GetExtension(file.FileName);

                SqlCommand com_updateimage = new SqlCommand("update Admins set imageAddress=@i where adminid=@id", con);
                com_updateimage.Parameters.AddWithValue("@i", imageAddress);
                com_updateimage.Parameters.AddWithValue("@id", t.adminID);

                com_updateimage.ExecuteNonQuery();

            }

            string auto_generatedPassword = System.Web.Security.Membership.GeneratePassword(8, 3).ToUpper();

            MembershipCreateStatus status;
            Membership.CreateUser(t.adminID.ToString(), auto_generatedPassword, "x@x.x", "abc", "abc", true, out status);

            if (status == MembershipCreateStatus.Success)
            {
                Roles.AddUserToRole(t.adminID.ToString(), "Admin");
                //con.Close();
                string idpass = t.adminID + " " + auto_generatedPassword;

                return idpass;
            }
            else
            {
               // con.Close();
                return null;
            }
            }

            finally
            {
                con.Close();
            }

        }




        public UpdateAdminModel viewAdminProfile(int adminID)
        {
            try
            { 
            SqlCommand com_viewAdmin = new SqlCommand("select adminID,AdminName,adminStatus from admins where adminid=@aid", con);
            com_viewAdmin.Parameters.AddWithValue("@aid", adminID);

            con.Open();
            SqlDataReader dr= com_viewAdmin.ExecuteReader();
            UpdateAdminModel ad = new UpdateAdminModel();
            if(dr.Read())
            {
                ad.adminID = dr.GetInt32(0);
                ad.adminName = dr.GetString(1);
                ad.adminStatus = dr.GetString(2);
            }
           // con.Close();
            return ad;
            }

            finally
            {
                con.Close();
            }
        }



        public bool updateAdminProfile(int adminID, UpdateAdminModel t)
        {
            try
            { 
            SqlCommand com_updateAadmin = new SqlCommand("update Admins set AdminName=@name, adminStatus=@status where AdminID=@aid", con);
            com_updateAadmin.Parameters.AddWithValue("@name", t.adminName);
            com_updateAadmin.Parameters.AddWithValue("@status", t.adminStatus);
            com_updateAadmin.Parameters.AddWithValue("@aid", t.adminID);
            

            con.Open();
            int a = com_updateAadmin.ExecuteNonQuery();
            if (a != 0)
            {
                //con.Close();
                return true;
            }
            else
            {
                //con.Close();
                return false;
            }
            }

            finally
            {
                con.Close();
            }
        }






        ////////////////////////////////////////////  ADDING STUDENT  //////////////////////////////////////////

        public string addStudent(StudentModel studentModel)
        {
            try
            { 

            SqlCommand com_addStudent = new SqlCommand("insert into Students values(@StudentID,@Name,@DOB,@StudentGender,@AddmissionYear,@Fathers_guardians_name,@RealtionWithGuardian,@Mothers_name,@Guardians_mob_no,@Address,@Class,@ResultStatus,@StudentStatus,@StudentPassword,@ps)", con);
            com_addStudent.Parameters.AddWithValue("@StudentID", "");
            com_addStudent.Parameters.AddWithValue("@Name", studentModel.name);
            com_addStudent.Parameters.AddWithValue("@DOB", studentModel.dob);
            com_addStudent.Parameters.AddWithValue("@StudentGender", studentModel.studentGender);
            com_addStudent.Parameters.AddWithValue("@AddmissionYear", studentModel.AddmissionYear);
            com_addStudent.Parameters.AddWithValue("@Fathers_guardians_name", studentModel.father_guardian_name);
            com_addStudent.Parameters.AddWithValue("@RealtionWithGuardian", studentModel.relationWithGuadrian);
            com_addStudent.Parameters.AddWithValue("@Mothers_name", studentModel.mother_name);
            com_addStudent.Parameters.AddWithValue("@Guardians_mob_no", studentModel.guardian_mob_no);
            com_addStudent.Parameters.AddWithValue("@Address", studentModel.address);
            com_addStudent.Parameters.AddWithValue("@Class", studentModel.class_name);
            com_addStudent.Parameters.AddWithValue("@ResultStatus", "Pass");
            com_addStudent.Parameters.AddWithValue("@StudentStatus", "current");
            com_addStudent.Parameters.AddWithValue("@StudentPassword", "");
            com_addStudent.Parameters.AddWithValue("@ps", "");
            con.Open();

            com_addStudent.ExecuteNonQuery();
            string temp = studentModel.dob;
            SqlCommand com_getSerialNo = new SqlCommand("select @@identity", con);
            int SerialNo = Convert.ToInt32(com_getSerialNo.ExecuteScalar());
            string addmissionYear = studentModel.AddmissionYear + "";
            addmissionYear = addmissionYear.Substring(2, 2);
            studentModel.studentId = "S" + addmissionYear + SerialNo; /////// ID logic

            Roles.AddUserToRole(studentModel.studentId.ToString(), "Student");

            /////////////////////////////////////// Password logic////////////////////////////////////////

            string mother_name = studentModel.mother_name;

            mother_name = mother_name.Substring(0, 3);
            temp = temp.Replace("-", string.Empty);
            studentModel.password = temp + mother_name;

            SqlCommand com_updateIdPass = new SqlCommand("update Students set StudentID=@StudentID, StudentPassword=@StudentPassword where SerialNo=@serialNo", con);
            com_updateIdPass.Parameters.AddWithValue("@StudentID", studentModel.studentId);
            com_updateIdPass.Parameters.AddWithValue("@StudentPassword", studentModel.password);
            com_updateIdPass.Parameters.AddWithValue("@serialNo", SerialNo);

            int update = com_updateIdPass.ExecuteNonQuery();
           // con.Close();
            if (update == 0)
            {
                return null;
            }
            else
                return studentModel.studentId;

            }

            finally
            {
                con.Close();
            }

        }

        ///////////////////////////////////////////////// VIEW STUDENT DETAILS////////////////////////////////////

        public StudentModel ViewStudent(string studentID)
        {
            try
            { 
            SqlCommand com_viewStudent = new SqlCommand("select * from Students where StudentID=@StudentID", con);
            com_viewStudent.Parameters.AddWithValue("@StudentID", studentID);
            con.Open();
            SqlDataReader dr = com_viewStudent.ExecuteReader();

            StudentModel s_model = new StudentModel();
            if (dr.Read())
            {
                s_model.studentId = dr.GetString(1);
                s_model.name = dr.GetString(2);
                s_model.dob = dr.GetDateTime(3).ToShortDateString();
                s_model.studentGender = dr.GetString(4);
                s_model.AddmissionYear = dr.GetInt32(5);
                s_model.father_guardian_name = dr.GetString(6);
                s_model.relationWithGuadrian = dr.GetString(7);
                s_model.mother_name = dr.GetString(8);
                s_model.guardian_mob_no = dr.GetString(9);
                s_model.address = dr.GetString(10);
                s_model.class_name = dr.GetString(11);
                s_model.resultStatus = dr.GetString(12);
                s_model.studentStatus = dr.GetString(13);
                s_model.password = dr.GetString(14);
            }


           // con.Close();
            return s_model;
            }

            finally
            {
                con.Close();
            }
        }



        //////////////////////////////////////////// Update student ///////////////////////////////////////
        public bool updateStudent(StudentModel s_model)
        {
            try
            { 

            SqlCommand com_updateStudent = new SqlCommand("update Students set Name=@Name, StudentGender=@StudentGender,  Fathers_guardians_name=@Fathers_guardians_name, RealtionWithGuardian=@RealtionWithGuardian, Guardians_mob_no=@Guardians_mob_no, Address=@Address, Class=@Class, StudentStatus=@StudentStatus where StudentID=@StudentID", con);
            com_updateStudent.Parameters.AddWithValue("@StudentID", s_model.studentId);
            com_updateStudent.Parameters.AddWithValue("@Name", s_model.name);
           // com_updateStudent.Parameters.AddWithValue("@DOB", s_model.dob);
            com_updateStudent.Parameters.AddWithValue("@StudentGender", s_model.studentGender);
            //com_updateStudent.Parameters.AddWithValue("@AddmissionYear", s_model.AddmissionYear);
            com_updateStudent.Parameters.AddWithValue("@Fathers_guardians_name", s_model.father_guardian_name);
            com_updateStudent.Parameters.AddWithValue("@RealtionWithGuardian", s_model.relationWithGuadrian);
            //com_updateStudent.Parameters.AddWithValue("@Mothers_name", s_model.mother_name);
            com_updateStudent.Parameters.AddWithValue("@Guardians_mob_no", s_model.guardian_mob_no);
            com_updateStudent.Parameters.AddWithValue("@Address", s_model.address);
            com_updateStudent.Parameters.AddWithValue("@Class", s_model.class_name);
            //com_updateStudent.Parameters.AddWithValue("@ResultStatus", s_model.resultStatus);
            com_updateStudent.Parameters.AddWithValue("@StudentStatus", s_model.studentStatus);
            //com_updateStudent.Parameters.AddWithValue("@StudentPassword", s_model.password);
            con.Open();
            int a = com_updateStudent.ExecuteNonQuery();
            if (a != 0)
            {
                //con.Close();
                return true;
            }
            else
            {
                //con.Close();
                return false;
            }
            }

            finally
            {
                con.Close();
            }
        }

        public bool checkStudentID(UpdateStudentByIDModel usbid_model)
        {
            try
            { 
            //throw new NotImplementedException();
            SqlCommand com_checkStudent = new SqlCommand("select count(*) from Students where StudentID=@StudentID", con);
            com_checkStudent.Parameters.AddWithValue("@StudentID", usbid_model.studentID);
            con.Open();
            int count = Convert.ToInt32(com_checkStudent.ExecuteScalar());
            //con.Close();
            if (count == 0)
            {
                return false;
            }
            else
            {
                return true;
            }
            }

            finally
            {
                con.Close();
            }
        }



        public string UploadToppers(UploadToppersModel m)
        {
            try
            {


                SqlCommand com_CountRow = new SqlCommand("select count(*) from Toppers_list where class=@class", con);
                com_CountRow.Parameters.AddWithValue("@class", m.OfClass);
                con.Open();
                int i = Convert.ToInt32(com_CountRow.ExecuteScalar());
                if (i == 1)
                {
                    if (m.Position == 1)
                    {
                        SqlCommand com_upldateClassTopperlist = new SqlCommand("update Toppers_list set first_name=@Name ,f_imagepath=@imagepath where class=@class", con);
                        com_upldateClassTopperlist.Parameters.AddWithValue("@Name", m.StdName);
                        com_upldateClassTopperlist.Parameters.AddWithValue("@imagepath", "");
                        com_upldateClassTopperlist.Parameters.AddWithValue("@class", m.OfClass);
                        com_upldateClassTopperlist.ExecuteNonQuery();

                        if(m.File!=null)
                        {
                            string FileAddress = "/ToppersPic/" + m.OfClass.ToString() + "_" + m.Position.ToString() + Path.GetExtension(m.File.FileName);
                            SqlCommand Com_updatePicPath = new SqlCommand("update Toppers_list set f_imagepath=@Address where class=@class", con);
                            Com_updatePicPath.Parameters.AddWithValue("@Address", FileAddress);
                            Com_updatePicPath.Parameters.AddWithValue("@class", m.OfClass);
                            Com_updatePicPath.ExecuteNonQuery();
                            return m.OfClass.ToString() + "_" + m.Position.ToString() + Path.GetExtension(m.File.FileName);
                        }
                        else
                        {
                            return "null";
                        }
                        
                    }
                    else if (m.Position == 2)
                    {

                        SqlCommand com_upldateClassTopperlist = new SqlCommand("update Toppers_list set second_name=@Name, s_imagepath=@imagepath where class=@class", con);
                        com_upldateClassTopperlist.Parameters.AddWithValue("@Name", m.StdName);
                        com_upldateClassTopperlist.Parameters.AddWithValue("@imagepath", "");
                        com_upldateClassTopperlist.Parameters.AddWithValue("@class", m.OfClass);
                        com_upldateClassTopperlist.ExecuteNonQuery();

                         if(m.File!=null)
                        {
                            string FileAddress = "/ToppersPic/" + m.OfClass.ToString() + "_" + m.Position.ToString() + Path.GetExtension(m.File.FileName);
                        SqlCommand Com_updatePicPath = new SqlCommand("update Toppers_list set s_imagepath=@Address where class=@class", con);
                        Com_updatePicPath.Parameters.AddWithValue("@Address", FileAddress);
                        Com_updatePicPath.Parameters.AddWithValue("@class", m.OfClass);
                        Com_updatePicPath.ExecuteNonQuery();
                        return m.OfClass.ToString() + "_" + m.Position.ToString() + Path.GetExtension(m.File.FileName);

                        }
                         else
                         {
                             return "null";
                         }
                    }
                    else
                    {
                        SqlCommand com_upldateClassTopperlist = new SqlCommand("update Toppers_list set third_name=@Name ,t_imagepath=@imagepath where class=@class", con);
                        com_upldateClassTopperlist.Parameters.AddWithValue("@Name", m.StdName);
                        com_upldateClassTopperlist.Parameters.AddWithValue("@imagepath", "");
                        com_upldateClassTopperlist.Parameters.AddWithValue("@class", m.OfClass);
                        com_upldateClassTopperlist.ExecuteNonQuery();

                         if(m.File!=null)
                        {
                            string FileAddress = "/ToppersPic/" + m.OfClass.ToString() + "_" + m.Position.ToString() + Path.GetExtension(m.File.FileName);
                        SqlCommand Com_updatePicPath = new SqlCommand("update Toppers_list set t_imagepath=@Address where class=@class", con);
                        Com_updatePicPath.Parameters.AddWithValue("@Address", FileAddress);
                        Com_updatePicPath.Parameters.AddWithValue("@class", m.OfClass);
                        Com_updatePicPath.ExecuteNonQuery();
                        return m.OfClass.ToString() + "_" + m.Position.ToString() + Path.GetExtension(m.File.FileName);
                        }
                         else
                         {
                             return "null";
                         }
                    }

                }
                else
                {
                    if (m.Position == 1)
                    {
                        SqlCommand com_upldateClassTopperlist = new SqlCommand("insert into Toppers_list(class,first_name,f_imagepath) values(@class,@Name,@imagepath)", con);
                        com_upldateClassTopperlist.Parameters.AddWithValue("@Name", m.StdName);
                        com_upldateClassTopperlist.Parameters.AddWithValue("@imagepath", "");
                        com_upldateClassTopperlist.Parameters.AddWithValue("@class", m.OfClass);
                        com_upldateClassTopperlist.ExecuteNonQuery();

                         if(m.File!=null)
                        {
                            string FileAddress = "/ToppersPic/" + m.OfClass.ToString() + "_" + m.Position.ToString() + Path.GetExtension(m.File.FileName);
                        SqlCommand Com_updatePicPath = new SqlCommand("update Toppers_list set f_imagepath=@Address where class=@class", con);
                        Com_updatePicPath.Parameters.AddWithValue("@Address", FileAddress);
                        Com_updatePicPath.Parameters.AddWithValue("@class", m.OfClass);
                        Com_updatePicPath.ExecuteNonQuery();
                        return m.OfClass.ToString() + "_" + m.Position.ToString() + Path.GetExtension(m.File.FileName);
                              }
                         else
                         {
                             return "null";
                         }
                    }
                    else if (m.Position == 2)
                    {

                        SqlCommand com_upldateClassTopperlist = new SqlCommand("insert into Toppers_list(class,second_name,s_imagepath) values(@class,@Name,@imagepath)", con);
                        com_upldateClassTopperlist.Parameters.AddWithValue("@Name", m.StdName);
                        com_upldateClassTopperlist.Parameters.AddWithValue("@imagepath", "");
                        com_upldateClassTopperlist.Parameters.AddWithValue("@class", m.OfClass);
                        com_upldateClassTopperlist.ExecuteNonQuery();
                         if(m.File!=null)
                        {
                            string FileAddress = "/ToppersPic/" + m.OfClass.ToString() + "_" + m.Position.ToString() + Path.GetExtension(m.File.FileName);
                        SqlCommand Com_updatePicPath = new SqlCommand("update Toppers_list set s_imagepath=@Address where class=@class", con);
                        Com_updatePicPath.Parameters.AddWithValue("@Address", FileAddress);
                        Com_updatePicPath.Parameters.AddWithValue("@class", m.OfClass);
                        Com_updatePicPath.ExecuteNonQuery();
                        return m.OfClass.ToString() + "_" + m.Position.ToString() + Path.GetExtension(m.File.FileName);
                        }
                         else
                         {
                             return "null";
                         }

                    }
                    else
                    {
                        SqlCommand com_upldateClassTopperlist = new SqlCommand("insert into Toppers_list(class,third_name,t_imagepath) values(@class,@Name,@imagepath)", con);
                        com_upldateClassTopperlist.Parameters.AddWithValue("@Name", m.StdName);
                        com_upldateClassTopperlist.Parameters.AddWithValue("@imagepath", "");
                        com_upldateClassTopperlist.Parameters.AddWithValue("@class", m.OfClass);
                        com_upldateClassTopperlist.ExecuteNonQuery();

                         if(m.File!=null)
                        {
                            string FileAddress = "/ToppersPic/" + m.OfClass.ToString() + "_" + m.Position.ToString() + Path.GetExtension(m.File.FileName);
                        SqlCommand Com_updatePicPath = new SqlCommand("update Toppers_list set t_imagepath=@Address where class=@class", con);
                        Com_updatePicPath.Parameters.AddWithValue("@Address", FileAddress);
                        Com_updatePicPath.Parameters.AddWithValue("@class", m.OfClass);
                        Com_updatePicPath.ExecuteNonQuery();
                        return m.OfClass.ToString() + "_" + m.Position.ToString() + Path.GetExtension(m.File.FileName);
                        }
                         else
                         {
                             return "null";
                         }

                    }

                }
            }
            finally
            {
                con.Close();
            }
        }


        ///////////Changing Academic Year///////////////

        public bool IncrementYear(int id)
        {
            try
            { 
            DateTime datevalue = (Convert.ToDateTime(DateTime.Now.ToString()));// to get current year
            String year = datevalue.Year.ToString();

            SqlCommand com_IncPassOut = new SqlCommand("update Students set class=class+10 where class>100 and resultstatus='Pass'", con);
            con.Open();
            com_IncPassOut.ExecuteNonQuery();
            SqlCommand com_IncPassOut1 = new SqlCommand("update Students set studentstatus='passout', PassoutYear=@pyr where class between 124 and 134 and resultstatus='Pass'", con);
            com_IncPassOut1.Parameters.AddWithValue("@pyr", year);
            com_IncPassOut1.ExecuteNonQuery();
            SqlCommand com_IncrYear = new SqlCommand("update Students set class=class+1 where resultstatus='Pass' and class<30 ", con);
            int i = com_IncrYear.ExecuteNonQuery();

            SqlCommand com_IncPassOut10th = new SqlCommand("update Students set studentstatus='10th pass', PassoutYear=@pyr where class=11 and resultstatus='Pass'", con);
            com_IncPassOut10th.Parameters.AddWithValue("@pyr", year);
            com_IncPassOut10th.ExecuteNonQuery();

          

            if (i > 0)
            {
                SqlCommand com_addAction = new SqlCommand("insert AdminWhoChangedAcademicYear values(@id,'Incremented',getdate()) ", con);
                com_addAction.Parameters.AddWithValue("@id", id);
                com_addAction.ExecuteNonQuery();


               // con.Close();
                return true;
            }
            else
            {
               // con.Close();
                return false;
            }
            }

            finally
            {
                con.Close();
            }
        }


        public bool DecrementYear(int id)
        {
            try
            { 
            SqlCommand com_IncPassOut = new SqlCommand("update Students set class=class-10 where resultstatus='Pass' and  class>100", con);
            con.Open();
            com_IncPassOut.ExecuteNonQuery();

            SqlCommand com_IncPassOut1 = new SqlCommand("update Students set studentstatus='current', PassoutYear=@pyr where resultstatus='Pass' and class between 120 and 124", con);
            com_IncPassOut1.Parameters.AddWithValue("@pyr", "");
            com_IncPassOut1.ExecuteNonQuery();


            SqlCommand com_IncrYear = new SqlCommand("update Students set class=class-1 where resultstatus='Pass' and class<30 ", con);
            int i = com_IncrYear.ExecuteNonQuery();

            SqlCommand com_IncrYear10 = new SqlCommand("update Students set studentstatus='current', PassoutYear=@pyr where resultstatus='Pass' and class=10 ", con);
            com_IncrYear10.Parameters.AddWithValue("@pyr", "");
            com_IncrYear10.ExecuteNonQuery();
            if (i > 0)
            {
                SqlCommand com_addAction = new SqlCommand("insert AdminWhoChangedAcademicYear values(@id,'Decremented',getdate()) ", con);
                com_addAction.Parameters.AddWithValue("@id", id);
                com_addAction.ExecuteNonQuery();
                return true;
            }
            else
                return false;
            }

            finally
            {
                con.Close();
            }
        }





        //////////////////////Changing result status//////////////////


        public bool ChangeResultStatus(ChangeStudentResultSt mod)
        {
            try
            { 
            SqlCommand com_ChangeRsltSt = new SqlCommand("update Students set ResultStatus=@Status where StudentID=@StdId ", con);
            com_ChangeRsltSt.Parameters.AddWithValue("@StdId", mod.StudentId);
            com_ChangeRsltSt.Parameters.AddWithValue("@Status", mod.Status);
            con.Open();
            int i = com_ChangeRsltSt.ExecuteNonQuery();
            if (i == 1)
            {
                //con.Close();
                return true;
            }
            else
            {
                //con.Close();
                return false;
            }
            }

            finally
            {
                con.Close();
            }
        }


        ////////////////////   all teachers 
        public List<GetAllTeacherModel> getAllTeachers()
        {
            try
            { 
            SqlCommand com_getAllTeacher = new SqlCommand("select TeacherName,TeacherDesignation,SubjectSpecialisation,TeacherID from Teachers", con);
            con.Open();
            SqlDataReader dr = com_getAllTeacher.ExecuteReader();
            List<GetAllTeacherModel> Lgt = new List<GetAllTeacherModel>();
            while (dr.Read())
            {
                GetAllTeacherModel obj = new GetAllTeacherModel();
                obj.teacherName = dr.GetString(0);
                obj.teacherDesignation = dr.GetString(1);
                obj.subjectSpecilization = dr.GetString(2);
                obj.teacherID =dr.GetInt32(3);
                //obj.imageAddress = dr.GetString(3);
                Lgt.Add(obj);
            }

            //con.Close();
            return Lgt;
            }

            finally
            {
                con.Close();
            }

        }

        ///////////////////911/////////////////////
        public List<StudentDataFetchModel> GetAllstudent(int ofClass)
        {
            try
            { 
            SqlCommand com_GetAllStd = new SqlCommand("select * from Students where Class=@ofclass", con);
            com_GetAllStd.Parameters.AddWithValue("@ofclass", ofClass);
            con.Open();
            SqlDataReader dr = com_GetAllStd.ExecuteReader();
            List<StudentDataFetchModel> obj = new List<StudentDataFetchModel>();
            while (dr.Read())
            {

                StudentDataFetchModel t = new StudentDataFetchModel();
                t.StdId = dr.GetString(1);
                t.StdName = dr.GetString(2);
                t.DOB = Convert.ToDateTime(dr["DOB"]).ToString();
                t.gender = dr.GetString(4);
                t.Admsnyr = dr.GetInt32(5);
                t.GuardName = dr.GetString(6);
                t.MothrsName = dr.GetString(8);
                t.MobNO = dr.GetString(9);
                t.Address = dr.GetString(10);
                t.OfClass = dr.GetString(11);
                t.RStatus = dr.GetString(12);
                t.SStatus = dr.GetString(13);
                t.StdPass = dr.GetString(14);

                obj.Add(t);

            }

           // con.Close();
            return obj;
            }

            finally
            {
                con.Close();
            }

        }






        ////////////////update password souvik 09/11 ////////////////////////
        public bool updatePassword(int adminID, ChangePasswordAdminModel c)
        {
            try
            {
                con.Open();
                MembershipUser user = Membership.GetUser(adminID.ToString());
                if (user.ChangePassword(c.oldPassword, c.newPassword))
                {
                    user.ChangePasswordQuestionAndAnswer(c.newPassword, c.securityQuestion, c.securityAnswer);

                    SqlCommand com_updatePasswordStatus = new SqlCommand("update Admins set passwordStatus='Updated' where adminID=@aid", con);
                    com_updatePasswordStatus.Parameters.AddWithValue("@aid", adminID);
                    com_updatePasswordStatus.ExecuteNonQuery();
                    //  con.Close();
                    return true;
                }
                else
                {
                    return false;
                }
            }
            finally
            {
                con.Close();
            }
        }





        ///////////////////////souvik 11/11/2017 ////////////////////////
        public List<AdminWhoChangedAcademicYearModel> ShowAdminsWhoChangedAcademicYear()
        {
            try
            { 
            SqlCommand com_getAll = new SqlCommand("select top 10 * from AdminWhoChangedAcademicYear order by DateAndTime desc", con);
            con.Open();
            SqlDataReader dr= com_getAll.ExecuteReader();
            List<AdminWhoChangedAcademicYearModel> lst_admins = new List<AdminWhoChangedAcademicYearModel>();

            while(dr.Read())
            {
                AdminWhoChangedAcademicYearModel ad = new AdminWhoChangedAcademicYearModel();
                ad.adminID = dr.GetInt32(0);
                ad.adminDone = dr.GetString(1);
                ad.dateAndTime = dr.GetDateTime(2).ToString();
                lst_admins.Add(ad);
            }


           // con.Close();
            return lst_admins;
            }

            finally
            {
                con.Close();
            }
        }


        //////////////fetch left student///////////
        public List<StudentModel> ViewLeftStudent(string year, string status)
        {
            try
            { 
            SqlCommand com_ViewLeftStd = new SqlCommand("select * from Students where StudentStatus=@status and PassoutYear=@year", con);
            com_ViewLeftStd.Parameters.AddWithValue("@status", status);
            com_ViewLeftStd.Parameters.AddWithValue("@year", year);
            con.Open();
            SqlDataReader dr = com_ViewLeftStd.ExecuteReader();
            List<StudentModel> LSM = new List<StudentModel>();
            while (dr.Read())
            {
                StudentModel sm = new StudentModel();
                sm.studentId = dr.GetString(1);
                sm.name = dr.GetString(2);
                sm.dob = dr.GetDateTime(3).ToShortDateString();
                sm.studentGender = dr.GetString(4);
                sm.AddmissionYear = dr.GetInt32(5);
                sm.father_guardian_name = dr.GetString(6);
                sm.relationWithGuadrian = dr.GetString(7);
                sm.mother_name = dr.GetString(8);
                sm.guardian_mob_no = dr.GetString(9);
                sm.address = dr.GetString(10);
                sm.class_name = dr.GetString(11);
                sm.resultStatus = dr.GetString(12);
                sm.studentStatus = dr.GetString(13);
                sm.password = dr.GetString(14);
                sm.Passoutyear = dr.GetString(15);
                LSM.Add(sm);
            }
           // con.Close();
            return LSM;
            }

            finally
            {
                con.Close();
            }

        }




        public AdminModel getAdminDetails(int adminID)
        {
            try { 
            SqlCommand com_getAdmin = new SqlCommand("select AdminName,AdminDesignation,imageAddress from Admins where adminID=@an", con);
            com_getAdmin.Parameters.AddWithValue("@an",adminID);
            con.Open();
            SqlDataReader dr =  com_getAdmin.ExecuteReader();
            AdminModel a = new AdminModel();
            if(dr.Read())
            {
                a.adminName = dr.GetString(0);
                a.adminDesignation = dr.GetString(1);
                a.imageAddress = dr.GetString(2);
            }
           // con.Close();
            return a;
            }

            finally
            {
                con.Close();
            }
        }


        //////////////////////////subha 12/11/2017///////
        public bool AddAlumni(AlumniModel a_model)
        {
            try
            { 
            SqlCommand com_addAlumni = new SqlCommand("insert into Alumni values(@name,@class,@year)", con);
            com_addAlumni.Parameters.AddWithValue("@name", a_model.name);
            com_addAlumni.Parameters.AddWithValue("@class", a_model.allumniClass);
            com_addAlumni.Parameters.AddWithValue("@year", a_model.year);
            con.Open();
            int count = com_addAlumni.ExecuteNonQuery();
           // con.Close();
            if (count == 1)
            {
                return true;
            }
            else
                return false;
            }

            finally
            {
                con.Close();
            }

        }



        public List<AlumniModel> GetAllAlumni()
        {
            try
            { 
            SqlCommand com_getAllAlumni = new SqlCommand("Select * from Alumni order by AlumniYear desc", con);
            con.Open();
            SqlDataReader dr = com_getAllAlumni.ExecuteReader();
            List<AlumniModel> list_getAllAlumni = new List<AlumniModel>();
            while (dr.Read())
            {
                AlumniModel a_model = new AlumniModel();
                a_model.alumniID = dr.GetInt32(0);
                a_model.name = dr.GetString(1);
                a_model.allumniClass = dr.GetString(2);
                a_model.year = dr.GetDateTime(3).Year.ToString();
                list_getAllAlumni.Add(a_model);
            }
            //con.Close();
            return list_getAllAlumni;
            }

            finally
            {
                con.Close();
            }
        }

        public AlumniModel GetAlumniByID(int id)
        {
            try
            { 
            SqlCommand com_getAlumniByID = new SqlCommand("Select * from Alumni where AlumniID=@aID", con);
            com_getAlumniByID.Parameters.AddWithValue("@aID", id);
            con.Open();
            SqlDataReader dr = com_getAlumniByID.ExecuteReader();
            AlumniModel a = new AlumniModel();
            while (dr.Read())
            {
                a.alumniID = dr.GetInt32(0);
                a.name = dr.GetString(1);
                a.allumniClass = dr.GetString(2);
                a.year = dr.GetDateTime(3).Year.ToString();
            }
           // con.Close();
            return a;
            }

            finally
            {
                con.Close();
            }
        }

        public bool UpdateAlumni(AlumniModel a_model)
        {
            try
            { 
            SqlCommand com_updateAlumni = new SqlCommand("Update Alumni set Name=@n,alumniclass=@ac,alumniyear=@ar where alumniid=@aid", con);
            com_updateAlumni.Parameters.AddWithValue("@n", a_model.name);
            com_updateAlumni.Parameters.AddWithValue("@ac", a_model.allumniClass);
            com_updateAlumni.Parameters.AddWithValue("@ar", a_model.year);
            com_updateAlumni.Parameters.AddWithValue("@aid", a_model.alumniID);
            con.Open();
            int count = com_updateAlumni.ExecuteNonQuery();
            con.Close();
            if (count == 1)
            {
                return true;
            }
            else
                return false;
            }

            finally
            {
                con.Close();
            }
        }



        //////////////////////////// souvik 13/11//////////////////////////////////////////
        public List<FeedbackModel> showAllFeedback()
        {
            try
            {
                SqlCommand com_showFeedback = new SqlCommand("select * from feedback", con);
                con.Open();
                SqlDataReader dr = com_showFeedback.ExecuteReader();
                List<FeedbackModel> list_feed = new List<FeedbackModel>();
                while (dr.Read())
                {
                    FeedbackModel model = new FeedbackModel();
                    model.feedbackID = dr.GetInt32(0);
                    model.SenderID = dr.GetString(1);
                    model.name = dr.GetString(2);
                    model.feedbackMessage = dr.GetString(3);
                    list_feed.Add(model);
                }

                // con.Close();
                return list_feed;
            }
            finally
            {
                con.Close();
            }
        }

        /////////////////////////////////subha 14/11/2017///////////////////////////
        public bool AddOC(OCModel oc_model)
        {
            if (oc_model.toYear == null)
            {
                oc_model.toYear = 1000 + "";
            }
            SqlCommand com_addOC = new SqlCommand("insert into OCommittee values(@name,@pos,@fromYear,@toYear)", con);
            com_addOC.Parameters.AddWithValue("@name", oc_model.ocName);
            com_addOC.Parameters.AddWithValue("@pos", oc_model.ocPosition);
            com_addOC.Parameters.AddWithValue("@fromYear", oc_model.fromYear);
            com_addOC.Parameters.AddWithValue("@toYear", oc_model.toYear);

            con.Open();
            int count = com_addOC.ExecuteNonQuery();
            con.Close();
            if (count == 1)
            {
                return true;
            }
            else
                return false;
        }

        public List<OCModel> GetAllOC()
        {
            SqlCommand com_getAllOC = new SqlCommand("select * from OCommittee order by fromYear desc", con);
            con.Open();
            SqlDataReader dr = com_getAllOC.ExecuteReader();
            List<OCModel> list_getAllOC = new List<OCModel>();
            while (dr.Read())
            {
                OCModel oc_model = new OCModel();
                oc_model.ocID = dr.GetInt32(0);
                oc_model.ocName = dr.GetString(1);
                oc_model.ocPosition = dr.GetString(2);
                oc_model.fromYear = dr.GetDateTime(3).Year.ToString();
                oc_model.toYear = dr.GetDateTime(4).Year.ToString();
                if (oc_model.toYear == "1000")
                {
                    oc_model.toYear = "";
                }
                list_getAllOC.Add(oc_model);
            }
            con.Close();

            return list_getAllOC;
        }

        public OCModel GetOCByID(int id)
        {
            SqlCommand com_getOCByID = new SqlCommand("select * from OCommittee  where ocID=@id", con);
            com_getOCByID.Parameters.AddWithValue("@id", id);
            con.Open();
            SqlDataReader dr = com_getOCByID.ExecuteReader();
            OCModel oc_model = new OCModel();
            while (dr.Read())
            {
                oc_model.ocID = dr.GetInt32(0);
                oc_model.ocName = dr.GetString(1);
                oc_model.ocPosition = dr.GetString(2);
                oc_model.fromYear = dr.GetDateTime(3).Year.ToString();
                oc_model.toYear = dr.GetDateTime(4).Year.ToString();
                if (oc_model.toYear == "1000")
                {
                    oc_model.toYear = "";
                }
            }
            con.Close();
            return oc_model;
        }

        public bool UpdateOC(OCModel oc)
        {
            if (oc.toYear == null)
            {
                oc.toYear = 1000 + "";
            }

            SqlCommand com_updateOC = new SqlCommand("Update OCommittee set ocName=@n,ocPosition=@pos,fromYear=@from,toYear=@to where ocID=@id", con);
            com_updateOC.Parameters.AddWithValue("@n", oc.ocName);
            com_updateOC.Parameters.AddWithValue("@pos", oc.ocPosition);
            com_updateOC.Parameters.AddWithValue("@from", oc.fromYear);
            com_updateOC.Parameters.AddWithValue("@to", oc.toYear);
            com_updateOC.Parameters.AddWithValue("@id", oc.ocID);

            con.Open();
            int count = com_updateOC.ExecuteNonQuery();
            con.Close();
            if (count == 1)
            {
                return true;
            }
            else
                return false;
        }

        //////////15nov//////
        public int FindClass(string id)
        {
            try
            {
                SqlCommand com_GetStudentClass = new SqlCommand("Select class from Students where StudentId=@id", con);
                com_GetStudentClass.Parameters.AddWithValue("@id", id);
                con.Open();
                int ofclass = Convert.ToInt32(com_GetStudentClass.ExecuteScalar());
                if (ofclass != 0)
                {
                    return ofclass;
                }
                else
                    return 0;
            }
            finally
            {
                con.Close();
            }
        }

        ////////////////dlelete from gallery///


        public bool deletePhoto(int id)
        {
            try
            {
                SqlCommand com_delfromGallery = new SqlCommand("delete from Gallery where imageID=@Iid", con);
                com_delfromGallery.Parameters.AddWithValue("@Iid", id);
                con.Open();
                int Did = com_delfromGallery.ExecuteNonQuery();
                if (Did == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            finally
            {
                con.Close();
            }
        }
        public List<ViewGalleryModel> getAllPhotos()
        {
            try
            {
                SqlCommand com_getAllPhotos = new SqlCommand("select * from Gallery order by imageID desc", con);
                con.Open();

                SqlDataReader dr = com_getAllPhotos.ExecuteReader();
                List<ViewGalleryModel> obj = new List<ViewGalleryModel>();

                while (dr.Read())
                {
                    ViewGalleryModel vgm = new ViewGalleryModel();
                    vgm.ImageId = dr.GetInt32(0);
                    vgm.title = dr.GetString(1);
                    vgm.imagePath = dr.GetString(2);
                    vgm.imageDescription = dr.GetString(3);
                    vgm.uploadDate = dr.GetDateTime(5).ToString();
                    vgm.uploaderID = dr.GetInt32(4);
                    obj.Add(vgm);
                }
                return obj;
            }
            finally
            {
                con.Close();
            }
        }


        /////////////////////////////////////getting image address by id for gallery///////////////
        public string getImageAddress(int id)
        {
            try
            {
                SqlCommand com_getImage = new SqlCommand("Select imagePath from Gallery where imageID=@id", con);
                com_getImage.Parameters.AddWithValue("@id", id);
                con.Open();
                string path = com_getImage.ExecuteScalar().ToString();
                if (path != "")
                {
                    return path;
                }
                else
                {
                    return "false";
                }
            }
            finally
            {
                con.Close();
            }
        }

        /////////show all news
        public List<NewsModel> GetAllEvents()
        {
            try
            {

                SqlCommand com_getAllEvents = new SqlCommand("select newsID, teacherID, uploadDate, newsTitle, newsDescription, newsDate from news order by newsDate desc", con);
                con.Open();
                SqlDataReader dr = com_getAllEvents.ExecuteReader();
                List<NewsModel> list = new List<NewsModel>();
                while (dr.Read())
                {
                    NewsModel n_model = new NewsModel();
                    n_model.newsID = dr.GetInt32(0);
                    n_model.teacherID = dr.GetInt32(1);
                    n_model.uploadDate = dr.GetDateTime(2).ToShortDateString();
                    n_model.newsTitle = dr.GetString(3);
                    n_model.newsDescription = dr.GetString(4);
                    n_model.newsDate = dr.GetDateTime(5).ToShortDateString();
                    list.Add(n_model);
                }

                //con.Close();
                return list;
            }

            finally
            {
                con.Close();
            }
        }




        ////////////delete news
        public int DeleteNews(int newsID)
        {
            try
            {
                SqlCommand com_deleteNews = new SqlCommand("Delete from News where newsID=@nID", con);
                com_deleteNews.Parameters.AddWithValue("@nID", newsID);
                con.Open();
                int count = com_deleteNews.ExecuteNonQuery();
                //con.Close();
                return count;
            }

            finally
            {
                con.Close();
            }
        }

    }

}